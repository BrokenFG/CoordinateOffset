# CoordinateOffset Configuration

# The default offset provider specifies the way that offsets will be
#   determined for players who do not have a provider otherwise specified.
# Options are any key under `offsetProviders` below (e.g. constant, random...)
defaultOffsetProvider: random


# Specify a different offset mode per player here by the player's UUID.
#   Get your UUID here: https://mcuuid.net/
# NOTE: It is recommended that you use LuckPerms meta instead to apply offsets
#   with more control (per-group, per-world, etc.)
perPlayerOffsetProvider:
  00000000-0000-0000-0000-000000000000: constant  # example


offsetProviders:
  constant:
    # The "constant" offset provider class consistently applies a specific
    #   offset.
    # Offsets are subtracted from real coordinates. That means that an offset
    #   of 1024/1024 would result in a player seeing themselves at (0, 0) when
    #   they stand at (1024, 1024). A player standing at the real origin would
    #   see themselves standing at (-1024, -1024).
    # X and Z values MUST be divisible by 16 to align with chunk boundaries!
    class: ConstantOffsetProvider
    offsetX: 1024
    offsetZ: 1024


  disabled:
    # A constant offset of 0 will disable coordinate obfuscation and allow
    #   players to see their real coordinates.
    class: ConstantOffsetProvider
    offsetX: 0
    offsetZ: 0


  random:
    # The "random" offset provider class re-rolls the player's offset every
    #   time they join, respawn, change world, or teleport a long distance.
    # Any of these events will not cause a re-roll if the respective `persist`
    #   setting is enabled. For persistence across player joins, use
    #   `RandomPersistentOffsetProvider` instead.
    class: RandomOffsetProvider

    persistAcrossRespawns: false
    persistAcrossWorldChanges: false
    persistAcrossDistantTeleports: false

    # Maximum possible offset
    randomBound: 1000000


  randomPersistent:
    # The "random persistent" offset provider class generates an offset once
    #   per player, and reuses that offset every time they join.
    class: RandomPersistentOffsetProvider

    # If `alignOverworldAndNether` is true, then each player's Nether offset
    #   will be set to 1/8th their Overworld offset. This will ensure that
    #   Nether portal linkage math still works out.
    # If false, the Overworld and Nether will use the same offset.
    alignOverworldAndNether: true

    # If `applyInEnd` is true, then the same offset for the Overworld will be
    #   active in the End. This is not recommended because the predictable
    #   generation in the End might allow players to figure out their offsets!
    applyInEnd: false

    # Maximum possible offset
    randomBound: 1000000


  zeroOnJoin:
    # The "zero on join" offset provider class generates an offset equal to
    #   the player's login coordinates, so they will see themselves at roughly
    #   (0, 0) every time they join.
    class: ZeroOnJoinOffsetProvider

    # If `alignOverworldAndNether` is true, then each player's Nether offset
    #   will be set to 1/8th their Overworld offset. This will ensure that
    #   Nether portal linkage math still works out.
    # If false, each world's offset will be centered on zero at the point they
    #   first enter the world.
    alignOverworldAndNether: true


  # Add custom offset modes here. For example:
  # myCustomOffsetMode:
  #   provider: constant
  #   offsetX: -16000
  #   offsetZ: 16000


# Enable extra logging (mostly for logging when each Player's offset changes).
verbose: false
