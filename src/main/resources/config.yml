# CoordinateOffset Configuration

# Specify the method by which coordinate offsets will be calculated.
# Options are any key under `offsetProviders` below (e.g. constant, random...)
defaultOffsetProvider: random


# List of overrides to the default offset provider. The first item has the
#   highest priority. `provider` is a required key; optional keys are
#   `world` and `playerUuid` which, if present, must ALL match for the
#   override to apply.
#offsetProviderOverrides:
#  - provider: constant
#    world: world
#  - provider: zeroAtLocation
#    playerUuid: 00000000-0000-0000-0000-000000000000


offsetProviders:
  constant:
    # The "constant" offset provider class applies a specific offset.
    # Offsets are subtracted from real coordinates. That means that an offset
    #   of 1024/1024 would result in a player seeing themselves at (0, 0) when
    #   they stand at (1024, 1024). A player standing at the real origin would
    #   see themselves standing at (-1024, -1024).
    # X and Z values MUST be divisible by 16 to align with chunk boundaries!
    class: ConstantOffsetProvider
    offsetX: 1024
    offsetZ: 1024


  disabled:
    # A constant offset of 0 will disable coordinate obfuscation and allow
    #   players to see their real coordinates.
    class: ConstantOffsetProvider
    offsetX: 0
    offsetZ: 0


  random:
    # The "random" offset provider class re-rolls the player's offset every
    #   time they join, respawn, change world, or teleport a long distance.
    class: RandomOffsetProvider

    # An action will not cause a re-roll if the respective `persist` setting
    #   is enabled. For persistence across player joins, use
    #   `RandomPersistentOffsetProvider` instead.
    persistAcrossRespawns: false
    persistAcrossWorldChanges: false
    persistAcrossDistantTeleports: false

    # Maximum possible offset
    randomBound: 100000


  randomPersistent:
    # The "random persistent" offset provider class generates an offset once
    #   per player per world, and reuses that offset every time they join.
    class: RandomPersistentOffsetProvider

    # Worlds aligned here will use the same offset, optionally with a scale
    #   factor. For example, `world:world_nether:8` would match Vanilla portal
    #   scaling, so each player's Nether offset is 1/8th their Overworld
    #   offset and portal linking math still works.
    worldAlignment:
      - world:world_nether:8

    # Maximum possible offset
    randomBound: 100000


  zeroAtLocation:
    # The "zero at location" offset provider class generates an offset equal
    #   to the player's coordinates, so they will see themselves at roughly
    #   (0, 0) every time their offset changes.
    class: ZeroAtLocationOffsetProvider

    # An action will not cause the offset to be zeroed if the respective
    #   `persist` setting is enabled.
    persistAcrossRespawns: true
    persistAcrossWorldChanges: true
    persistAcrossDistantTeleports: true

    # Worlds aligned here will use the same offset, optionally with a scale
    #   factor. For example, `world:world_nether:8` would match Vanilla portal
    #   scaling, so each player's Nether offset is 1/8th their Overworld
    #   offset and portal linking math still works.
    # Note: This ONLY works if `persistAcrossWorldChanges` is true!
    worldAlignment:
      - world:world_nether:8

  # Add custom offset modes here. For example:
  # myCustomOffsetMode:
  #   provider: constant
  #   offsetX: -16000
  #   offsetZ: 16000


# Enable a log message when a player's offset changes.
verbose: false
